<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">
    <property name="severity" value="error" />
    <property name="fileExtensions" value="java, properties, xml" />

    <!-- Checks for long source files. -->
    <!-- <module name="FileLength" /> -->

    <!-- Checks that there are no tab characters ('\t') in the source code. -->
    <module name="FileTabCharacter" />

    <!-- Checks that a source file begins with a specified header. -->
    <!-- <module name="Header" /> -->

    <!-- Checks that each Java package has a Javadoc file used for commenting. -->
    <!-- <module name="JavadocPackage" /> -->

    <!-- Checks for long lines. -->
    <!-- <module name="LineLength" /> -->

    <!-- Checks whether files end with a line separator. -->
    <!-- <module name="NewlineAtEndOfFile" /> -->

    <!-- Detects if keys in properties files are in correct order. -->
    <!-- <module name="OrderedProperties" /> -->

    <!-- Checks the header of a source file against a header that contains a regular expression for each line of the source header. -->
    <!-- <module name="RegexpHeader" /> -->

    <!-- Checks that a specified pattern matches across multiple lines in any file type. -->
    <!-- <module name="RegexpMultiline" /> -->

    <!-- Checks that a specified pattern matches based on file and/or folder path. -->
    <!-- <module name="RegexpOnFilename" /> -->

    <!-- Checks that a specified pattern matches a single line in any file type. -->
    <!-- <module name="RegexpSingleline" /> -->

    <!-- Ensures the correct translation of code by checking property files for consistency regarding their keys. -->
    <!-- <module name="Translation" /> -->

    <!-- Detects duplicated keys in properties files. -->
    <module name="UniqueProperties" />

    <module name="TreeWalker">

        <!-- Validates abbreviations (consecutive capital letters) length in identifier name, it also allows to enforce camel case naming. -->
        <!-- <module name="AbbreviationAsWordInName" /> -->

        <!-- Ensures that the names of abstract classes conforming to some regular expression and check that abstract modifier exists. -->
        <module name="AbstractClassName" />

        <!-- Checks location of annotation on language elements. -->
        <!-- <module name="AnnotationLocation" /> -->

        <!-- Checks that annotations are located on the same line with their targets. -->
        <!-- <module name="AnnotationOnSameLine" /> -->

        <!-- Checks the style of elements in annotations. -->
        <module name="AnnotationUseStyle" />

        <!-- Checks for long anonymous inner classes. -->
        <!-- <module name="AnonInnerLength" /> -->

        <!-- Checks that array initialization contains a trailing comma. -->
        <!-- <module name="ArrayTrailingComma" /> -->

        <!-- Checks the style of array type definitions. -->
        <module name="ArrayTypeStyle" />

        <!-- Checks the order of javadoc block-tags or javadoc tags. -->
        <!-- <module name="AtclauseOrder" /> -->

        <!-- Detects double brace initialization. -->
        <module name="AvoidDoubleBraceInitialization" />

        <!-- Restricts using Unicode escapes (such as \u221e). -->
        <module name="AvoidEscapedUnicodeCharacters" />

        <!-- Detects inline conditionals. -->
        <!-- <module name="AvoidInlineConditionals" /> -->

        <!-- TODO enable this -->
        <!-- Finds nested blocks (blocks that are used freely in the code). -->
        <!-- <module name="AvoidNestedBlocks" /> -->

        <!-- Checks if call to superclass constructor without arguments is present. -->
        <module name="AvoidNoArgumentSuperConstructorCall" />

        <!-- Checks that there are no import statements that use the * notation. -->
        <module name="AvoidStarImport" />

        <!-- Checks that there are no static import statements. -->
        <!-- <module name="AvoidStaticImport" /> -->

        <!-- Restricts the number of boolean operators (&&, ||, &, | and ^) in an expression. -->
        <module name="BooleanExpressionComplexity">
            <property name="max" value="4" />
        </module>

        <!-- Checks that catch parameter names conform to a specified pattern. -->
        <!-- <module name="CatchParameterName" /> -->

        <!-- Measures the number of instantiations of other classes within the given class or record. -->
        <!-- <module name="ClassDataAbstractionCoupling" /> -->

        <!-- Checks the number of other types a given class/record/interface/enum/annotation relies on. -->
        <!-- <module name="ClassFanOutComplexity" /> -->

        <!-- Checks for implicit modifiers on nested types in classes and records. -->
        <!-- <module name="ClassMemberImpliedModifier" /> -->

        <!-- Checks that class type parameter names conform to a specified pattern. -->
        <module name="ClassTypeParameterName" />

        <!-- Controls the indentation between comments and surrounding code. -->
        <!-- <module name="CommentsIndentation" /> -->

        <!-- Checks that constant names conform to a specified pattern. -->
        <module name="ConstantName">
            <property name="applyToPublic" value="true" />
            <property name="applyToProtected" value="true" />
            <property name="applyToPackage" value="true" />
            <property name="applyToPrivate" value="false" />
        </module>

        <!-- Checks that classes and records which define a covariant equals() method also override method equals(Object). -->
        <module name="CovariantEquals" />

        <!-- Checks that the groups of import declarations appear in the order specified by the user. -->
        <!-- <module name="CustomImportOrder" /> -->

        <!-- Checks cyclomatic complexity against a specified limit. -->
        <!-- <module name="CyclomaticComplexity" /> -->

        <!-- Checks that the parts of a class, record, or interface declaration appear in the order suggested by the Code Conventions for the Java Programming Language. -->
        <!-- <module name="DeclarationOrder" /> -->

        <!-- Check that the default is after all the cases in a switch statement. -->
        <module name="DefaultComesLast" />

        <!-- Checks for restricted tokens beneath other tokens. -->
        <!-- <module name="DescendantToken" /> -->

        <!-- Checks that classes are designed for extension (subclass creation). -->
        <!-- <module name="DesignForExtension" /> -->

        <!-- TODO enable this -->
        <!-- Checks for empty blocks. -->
        <!-- <module name="EmptyBlock" /> -->

        <!-- Checks for empty catch blocks. -->
        <module name="EmptyCatchBlock" />

        <!-- Checks the padding of an empty for initializer; that is whether a white space is required at an empty for initializer, or such white space is forbidden. -->
        <module name="EmptyForInitializerPad" />

        <!-- Checks the padding of an empty for iterator; that is whether a white space is required at an empty for iterator, or such white space is forbidden. -->
        <module name="EmptyForIteratorPad" />

        <!-- Checks for empty line separators after header, package, all import declarations, fields, constructors, methods, nested classes, static initializers and instance initializers. -->
        <!-- <module name="EmptyLineSeparator" /> -->

        <!-- Detects empty statements (standalone ";" semicolon). -->
        <module name="EmptyStatement" />

        <!-- Checks that any combination of String literals is on the left side of an equals() comparison. -->
        <!-- <module name="EqualsAvoidNull" /> -->

        <!-- Checks that classes that either override equals() or hashCode() also overrides the other. -->
        <module name="EqualsHashCode" />

        <!-- Restricts the number of executable statements to a specified limit. -->
        <!-- <module name="ExecutableStatementCount" /> -->

        <!-- Checks if any class or object member is explicitly initialized to default for its type value (null for object references, zero for numeric types and char and false for boolean. -->
        <module name="ExplicitInitialization" />

        <!-- Checks for fall-through in switch statements. -->
        <module name="FallThrough" />

        <!-- Checks that a class which has only private constructors is declared as final. -->
        <module name="FinalClass" />

        <!-- Checks that local variables that never have their values changed are declared final. -->
        <module name="FinalLocalVariable" />

        <!-- Checks that parameters for methods, constructors, catch and for-each blocks are final. -->
        <module name="FinalParameters" />

        <!-- Checks that the whitespace around the Generic tokens (angle brackets) "<" and ">" are correct to the typical convention. -->
        <module name="GenericWhitespace" />

        <!-- Checks that a local variable or a parameter does not shadow a field that is defined in the same class. -->
        <!-- <module name="HiddenField" /> -->

        <!-- Makes sure that utility classes (classes that contain only static methods or fields in their API) do not have a public constructor. -->
        <module name="HideUtilityClassConstructor" />

        <!-- Checks that certain exception types do not appear in a catch statement. -->
        <!-- <module name="IllegalCatch" /> -->

        <!-- Checks identifiers with a regular expression for a set of illegal names, such as those that are restricted or contextual keywords. -->
        <module name="IllegalIdentifierName">
            <property name="format" value="^(?!(record|yield|var|permits|sealed|_)$).+$" />
        </module>

        <!-- Checks for imports from a set of illegal packages. -->
        <module name="IllegalImport">
            <property name="illegalPkgs" value="sun,com.sun" />
        </module>

        <!-- Checks for illegal instantiations where a factory method is preferred. -->
        <module name="IllegalInstantiation ">
            <property name="classes" value="java.lang.Boolean,java.lang.Character,java.lang.Byte,java.lang.Short,java.lang.Integer,java.lang.Long,java.lang.Float,java.lang.Double,java.lang.String" />
        </module>

        <!-- Checks that specified types are not declared to be thrown. -->
        <module name="IllegalThrows" />

        <!-- Checks for illegal tokens. -->
        <!-- <module name="IllegalToken" /> -->

        <!-- Checks specified tokens text for matching an illegal pattern. -->
        <!-- <module name="IllegalTokenText" /> -->

        <!-- Checks that particular classes or interfaces are never used. -->
        <module name="IllegalType" />

        <!-- Controls what can be imported in each package and file. -->
        <!-- <module name="ImportControl" /> -->

        <!-- Checks the ordering/grouping of imports. -->
        <!-- <module name="ImportOrder" /> -->

        <!-- Checks correct indentation of Java code. -->
        <!-- <module name="Indentation" /> -->

        <!-- TODO enable this -->
        <!-- Checks for assignments in subexpressions, such as in String s = Integer.toString(i = 2);. -->
        <!-- <module name="InnerAssignment" /> -->

        <!-- Checks nested (internal) classes/interfaces are declared at the bottom of the primary (top-level) class after all init and static init blocks, method, constructor and field declarations. -->
        <!-- <module name="InnerTypeLast" /> -->

        <!-- Implements Joshua Bloch, Effective Java, Item 17 - Use Interfaces only to define types. -->
        <module name="InterfaceIsType" />

        <!-- Checks for implicit modifiers on interface members and nested types. -->
        <!-- <module name="InterfaceMemberImpliedModifier" /> -->

        <!-- Checks that interface type parameter names conform to a specified pattern. -->
        <module name="InterfaceTypeParameterName" />

        <!-- Checks that Javadocs are located at the correct position. -->
        <module name="InvalidJavadocPosition" />

        <!-- Checks that a javadoc block tag appears only at the beginning of a line, ignoring leading asterisks and white space. -->
        <!-- <module name="JavadocBlockTagLocation" /> -->

        <!-- Checks that the Javadoc content begins from the same position for all Javadoc comments in the project. -->
        <!-- <module name="JavadocContentLocation" /> -->

        <!-- Checks the Javadoc of a method or constructor. -->
        <!-- <module name="JavadocMethod" /> -->

        <!-- Checks if the javadoc has leading asterisks on each line. -->
        <!-- <module name="JavadocMissingLeadingAsterisk" /> -->

        <!-- Checks that there is at least one whitespace after the leading asterisk. -->
        <!-- <module name="JavadocMissingWhitespaceAfterAsterisk" /> -->

        <!-- Checks the Javadoc paragraph. -->
        <!-- <module name="JavadocParagraph" /> -->

        <!-- Validates Javadoc comments to help ensure they are well formed. -->
        <module name="JavadocStyle" />

        <!-- Checks the indentation of the continuation lines in block tags. -->
        <!-- <module name="JavadocTagContinuationIndentation" /> -->

        <!-- Checks the Javadoc comments for type definitions. -->
        <!-- <module name="JavadocType" /> -->

        <!-- Checks that a variable has a Javadoc comment. -->
        <!-- <module name="JavadocVariable" /> -->

        <!-- Determines complexity of methods, classes and files by counting the Non Commenting Source Statements (NCSS). -->
        <!-- <module name="JavaNCSS" /> -->

        <!-- Checks lambda body length. -->
        <!-- <module name="LambdaBodyLength" /> -->

        <!-- Checks lambda parameter names. -->
        <module name="LambdaParameterName" />

        <!-- Checks for the placement of left curly braces ('{') for code blocks. -->
        <!-- <module name="LeftCurly" /> -->

        <!-- TODO enable this -->
        <!-- Checks that local final variable names conform to a specified pattern. -->
        <!-- <module name="LocalFinalVariableName" /> -->

        <!-- TODO enable this -->
        <!-- Checks that local, non-final variable names conform to a specified pattern. -->
        <!-- <module name="LocalVariableName" /> -->

        <!-- Checks that there are no "magic numbers" where a magic number is a numeric literal that is not defined as a constant. -->
        <!-- <module name="MagicNumber" /> -->

        <!-- TODO enable this -->
        <!-- Checks that instance variable names conform to a specified pattern. -->
        <!-- <module name="MemberName" /> -->

        <!-- Checks the number of methods declared in each type declaration by access modifier or total count. -->
        <!-- <module name="MethodCount" /> -->

        <!-- Checks for long methods and constructors. -->
        <!-- <module name="MethodLength" /> -->

        <!-- Checks that method names conform to a specified pattern. -->
        <module name="MethodName" />

        <!-- Checks the padding between the identifier of a method definition, constructor definition, method call, or constructor invocation; and the left parenthesis of the parameter list. -->
        <!-- <module name="MethodParamPad" /> -->

        <!-- Checks that method type parameter names conform to a specified pattern. -->
        <module name="MethodTypeParameterName" />

        <!-- Checks that classes (except abstract ones) define a constructor and don't rely on the default one. -->
        <!-- <module name="MissingCtor" /> -->

        <!-- Verifies that the annotation @Deprecated and the Javadoc tag @deprecated are both present when either of them is present. -->
        <module name="MissingDeprecated" />

        <!-- Checks for missing Javadoc comments for a method or constructor. -->
        <!-- <module name="MissingJavadocMethod" /> -->

        <!-- Checks for missing Javadoc comments in package-info.java files. -->
        <!-- <module name="MissingJavadocPackage" /> -->

        <!-- Checks for missing Javadoc comments for class, enum, interface, and annotation interface definitions. -->
        <!-- <module name="MissingJavadocType" /> -->

        <!-- Verifies that the @Override annotation is present when the @inheritDoc javadoc tag is present. -->
        <module name="MissingOverride" />

        <!-- Checks that switch statement has a default clause. -->
        <module name="MissingSwitchDefault" />

        <!-- Checks that for loop control variables are not modified inside the for block. -->
        <!-- <module name="ModifiedControlVariable" /> -->

        <!-- Checks that the order of modifiers conforms to the suggestions in the Java Language specification, § 8.1.1, 8.3.1, 8.4.3 and 9.4. -->
        <module name="ModifierOrder" />

        <!-- Checks for multiple occurrences of the same string literal within a single file. -->
        <!-- <module name="MultipleStringLiterals" /> -->

        <!-- Checks that each variable declaration is in its own statement and on its own line. -->
        <module name="MultipleVariableDeclarations" />

        <!-- Ensures that exception classes (classes with names conforming to some regular expression and explicitly extending classes with names conforming to other regular expression) are immutable, that is, that they have only final fields. -->
        <module name="MutableException" />

        <!-- Checks for braces around code blocks. -->
        <!-- <module name="NeedBraces" /> -->

        <!-- Restricts nested for blocks to a specified depth. -->
        <!-- <module name="NestedForDepth" /> -->

        <!-- Restricts nested if-else blocks to a specified depth. -->
        <!-- <module name="NestedIfDepth" /> -->

        <!-- Restricts nested try-catch-finally blocks to a specified depth. -->
        <!-- <module name="NestedTryDepth" /> -->

        <!-- Checks that array initialization do not contain a trailing comma. -->
        <module name="NoArrayTrailingComma" />

        <!-- Checks that the clone method is not overridden from the Object class. -->
        <module name="NoClone" />

        <!-- Checks whether file contains code. -->
        <!-- <module name="NoCodeInFile" /> -->

        <!-- Checks that there is no method finalize with zero parameters. -->
        <module name="NoFinalizer" />

        <!-- Checks that chosen statements are not line-wrapped. -->
        <!-- <module name="NoLineWrap" /> -->

        <!-- Checks that the block tag is followed by description. -->
        <module name="NonEmptyAtclauseDescription" />

        <!-- Checks that enum definition does not contain a trailing comma. -->
        <module name="NoEnumTrailingComma" />

        <!-- Checks that there is no whitespace after a token. -->
        <!-- <module name="NoWhitespaceAfter" /> -->

        <!-- Checks that there is no whitespace before a token. -->
        <!-- <module name="NoWhitespaceBefore" /> -->

        <!-- Checks the NPATH complexity against a specified limit. -->
        <!-- <module name="NPathComplexity" /> -->

        <!-- Checks that there is only one statement per line. -->
        <module name="OneStatementPerLine" />

        <!-- Checks that each top-level class, interface, enum or annotation resides in a source file of its own. -->
        <module name="OneTopLevelClass" />

        <!-- Checks the policy on how to wrap lines on operators. -->
        <module name="OperatorWrap" />

        <!-- Checks that the outer type name and the file name match. -->
        <!-- <module name="OuterTypeFilename" /> -->

        <!-- Checks for the number of types declared at the outer (or root) level in a file. -->
        <!-- <module name="OuterTypeNumber" /> -->

        <!-- Checks that overloaded methods are grouped together. -->
        <!-- <module name="OverloadMethodsDeclarationOrder" /> -->

        <!-- Checks that all package annotations are in the package-info.java file. -->
        <module name="PackageAnnotation" />

        <!-- Ensures that a class has a package declaration, and (optionally) whether the package name matches the directory name for the source file. -->
        <!-- <module name="PackageDeclaration" /> -->

        <!-- Checks that package names conform to a specified pattern. -->
        <module name="PackageName" />

        <!-- Disallows assignment of parameters. -->
        <module name="ParameterAssignment" />

        <!-- Checks that method parameter names conform to a specified pattern. -->
        <module name="ParameterName" />

        <!-- Checks the number of parameters of a method or constructor. -->
        <!-- <module name="ParameterNumber" /> -->

        <!-- Checks the policy on the padding of parentheses; that is whether a space is required after a left parenthesis and before a right parenthesis, or such spaces are forbidden. -->
        <!-- <module name="ParenPad" /> -->

        <!-- Checks that pattern variable names conform to a specified pattern. -->
        <!-- <module name="PatternVariableName" /> -->

        <!-- Checks the number of record components in the header of a record definition. -->
        <!-- <module name="RecordComponentNumber" /> -->

        <!-- Checks that record type parameter names conform to a specified pattern. -->
        <module name="RecordTypeParameterName" />

        <!-- Checks for redundant import statements. -->
        <module name="RedundantImport" />

        <!-- Checks for redundant modifiers. -->
        <module name="RedundantModifier" />

        <!-- Checks that a specified pattern exists, exists less than a set number of times, or does not exist in the file. -->
        <module name="Regexp">
            <property name="format" value="TODO\s+(?!MPX-\d+).*" />
            <property name="illegalPattern" value="true" />
            <property name="message" value="TODOs must have a linked JIRA issue: 'TODO MPX-123 text'" />
        </module>
        <!--
        <module name="Regexp">
            <property name="format" value="System\.out\.print" />
            <property name="illegalPattern" value="true" />
        </module>
        -->
        <module name="Regexp">
            <property name="format" value="System\.err\.print" />
            <property name="illegalPattern" value="true" />
        </module>
        <module name="Regexp">
            <property name="format" value="printStackTrace" />
            <property name="illegalPattern" value="true" />
        </module>
        <module name="Regexp">
            <property name="format" value="LocalDate\.now()" />
            <property name="illegalPattern" value="true" />
        </module>
        <module name="Regexp">
            <property name="format" value="LocalDateTime\.now()" />
            <property name="illegalPattern" value="true" />
        </module>
        <module name="Regexp">
            <property name="format" value="new FileInputStream" />
            <property name="illegalPattern" value="true" />
        </module>
        <module name="Regexp">
            <property name="format" value="new FileOutputStream" />
            <property name="illegalPattern" value="true" />
        </module>
        <module name="Regexp">
            <property name="format" value="new BufferedInput" />
            <property name="illegalPattern" value="true" />
        </module>
        <module name="Regexp">
            <property name="format" value="new BufferedOutput" />
            <property name="illegalPattern" value="true" />
        </module>

        <!-- Checks that a specified pattern matches a single line in Java files. -->
        <!-- <module name="RegexpSinglelineJava" /> -->

        <!-- Checks that references to instance variables and methods of the present object are explicitly of the form "this.varName" or "this.methodName(args)" and that those references don't rely on the default behavior when "this." is absent. -->
        <module name="RequireThis">
            <property name="checkFields" value="true" />
            <property name="checkMethods" value="false" />
            <property name="validateOnlyOverlapping" value="false" />
        </module>

        <!-- Restricts the number of return statements in methods, constructors and lambda expressions. -->
        <!-- <module name="ReturnCount" /> -->

        <!-- Checks the placement of right curly braces ('}') for code blocks. -->
        <!-- <module name="RightCurly" /> -->

        <!-- Checks line wrapping with separators. -->
        <!-- <module name="SeparatorWrap" /> -->

        <!-- Checks for over-complicated boolean expressions. -->
        <module name="SimplifyBooleanExpression" />

        <!-- Checks for over-complicated boolean return statements. -->
        <module name="SimplifyBooleanReturn" />

        <!-- Checks that a Javadoc block can fit in a single line and doesn't contain block tags. -->
        <!-- <module name="SingleLineJavadoc" /> -->

        <!-- Checks that one blank line before the block tag if it is present in Javadoc. -->
        <!-- <module name="RequireEmptyLineBeforeBlockTagGroup" /> -->

        <!-- Checks that non-whitespace characters are separated by no more than one whitespace. -->
        <module name="SingleSpaceSeparator" />

        <!-- Checks that static, non-final variable names conform to a specified pattern. -->
        <module name="StaticVariableName" />

        <!-- Checks that string literals are not used with == or !=. -->
        <module name="StringLiteralEquality" />

        <!-- Checks that Javadoc summary sentence does not contain phrases that are not recommended to use. -->
        <!-- <module name="SummaryJavadoc" /> -->

        <!-- Checks that an overriding clone() method invokes super.clone(). -->
        <module name="SuperClone" />

        <!-- Checks that an overriding finalize() method invokes super.finalize(). -->
        <module name="SuperFinalize" />

        <!-- Allows to specify what warnings that@SuppressWarnings is not allowed to suppress. -->
        <!-- <module name="SuppressWarnings" /> -->

        <!-- Restricts throws statements to a specified count. -->
        <!-- <module name="ThrowsCount" /> -->

        <!-- Checks for TODO: comments. -->
        <!-- <module name="TodoComment" /> -->

        <!-- The check to ensure that requires that comments be the only thing on a line. -->
        <!-- <module name="TrailingComment" /> -->

        <!-- Checks the policy on the padding of parentheses for typecasts. -->
        <!-- <module name="TypecastParenPad" /> -->

        <!-- Checks that type names conform to a specified pattern. -->
        <module name="TypeName" />

        <!-- Detects uncommented main methods. -->
        <module name="UncommentedMain">
            <property name="excludedClasses" value="\.Main$" />
        </module>

        <!-- Checks if unnecessary parentheses are used in a statement or expression. -->
        <module name="UnnecessaryParentheses" />

        <!-- Checks if unnecessary semicolon is in enum definitions. -->
        <module name="UnnecessarySemicolonInEnumeration" />

        <!-- Checks if unnecessary semicolon is used in last resource declaration. -->
        <module name="UnnecessarySemicolonInTryWithResources" />

        <!-- Checks if unnecessary semicolon is used after type declaration. -->
        <module name="UnnecessarySemicolonAfterOuterTypeDeclaration" />

        <!-- Checks if unnecessary semicolon is used after type member declaration. -->
        <module name="UnnecessarySemicolonAfterTypeMemberDeclaration" />

        <!-- Checks for unused import statements. -->
        <module name="UnusedImports" />

        <!-- Checks that long constants are defined with an upper ell. -->
        <module name="UpperEll" />

        <!-- Checks the distance between declaration of variable and its first usage. -->
        <!-- <module name="VariableDeclarationUsageDistance" /> -->

        <!-- Checks visibility of class members. -->
        <!-- <module name="VisibilityModifier" /> -->

        <!-- Checks that a token is followed by whitespace, with the exception that it does not check for whitespace after the semicolon of an empty for iterator. -->
        <!-- <module name="WhitespaceAfter" /> -->

        <!-- Checks that a token is surrounded by whitespace. -->
        <!-- <module name="WhitespaceAround" /> -->

        <!-- Requires user defined Javadoc tag to be present in Javadoc comment with defined format. -->
        <!-- <module name="WriteTag" /> -->
    </module>
</module>